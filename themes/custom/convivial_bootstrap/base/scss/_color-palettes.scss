/*! @convivial_bootstrap/color-palettes */

// Define CSS variables
:root {
  --alt-text: rgba(0, 0, 0, 0.6);
}

// Default color palettes
.cp {
  padding: calc($grid-gutter-width * 2) calc($grid-gutter-width / 2);

  @include media-breakpoint-up(md) {
    padding-left: $grid-gutter-width;
    padding-right: $grid-gutter-width;
  }
}

.cp--standard {
  background-color: var(--standard-background);
}

$palettes: (
  standard: (
    is_dark: false,
    foreground: var(--standard-foreground),
    background: var(--standard-background),
    focus: var(--standard-focus),
    link: var(--standard-link),
    link_hover: var(--standard-link-hover),
    link_active: var(--standard-link-active),
    accent: var(--standard-accent),
    accent_hover: var(--standard-accent-hover),
    accent_active: var(--standard-accent-active),
  ),
  alt: (
    is_dark: false,
    foreground: var(--alt-foreground),
    background: var(--alt-background),
    focus: var(--alt-focus),
    link: var(--alt-link),
    link_hover: var(--alt-link-hover),
    link_active: var(--alt-link-active),
    accent: var(--alt-accent),
    accent_hover: var(--alt-accent-hover),
    accent_active: var(--alt-accent-active),
  ),
  dark: (
    is_dark: true,
    foreground: var(--dark-foreground),
    background: var(--dark-background),
    focus: var(--dark-focus),
    link: var(--dark-link),
    link_hover: var(--dark-link-hover),
    link_active: var(--dark-link-active),
    accent: var(--dark-accent),
    accent_hover: var(--dark-accent-hover),
    accent_active: var(--dark-accent-active),
  ),
  dark-alt: (
    is_dark: true,
    foreground: var(--dark-alt-foreground),
    background: var(--dark-alt-background),
    focus: var(--dark-alt-focus),
    link: var(--dark-alt-link),
    link_hover: var(--dark-alt-link-hover),
    link_active: var(--dark-alt-link-active),
    accent: var(--dark-alt-accent),
    accent_hover: var(--dark-alt-accent-hover),
    accent_active: var(--dark-alt-accent-active),
  ),
  primary-light: (
    is_dark: false,
    foreground: var(--primary-light-foreground),
    background: var(--primary-light-background),
    focus: var(--primary-light-focus),
    link: var(--primary-light-link),
    link_hover: var(--primary-light-link-hover),
    link_active: var(--primary-light-link-active),
    accent: var(--primary-light-accent),
    accent_hover: var(--primary-light-accent-hover),
    accent_active: var(--primary-light-accent-active),
  ),
  primary-dark: (
    is_dark: true,
    foreground: var(--primary-dark-foreground),
    background: var(--primary-dark-background),
    focus: var(--primary-dark-focus),
    link: var(--primary-dark-link),
    link_hover: var(--primary-dark-link-hover),
    link_active: var(--primary-dark-link-active),
    accent: var(--primary-dark-accent),
    accent_hover: var(--primary-dark-accent-hover),
    accent_active: var(--primary-dark-accent-active),
  ),
);

// Set each color palettes
@each $name, $palette in $palettes {
  $is_dark: map-get($palette, is_dark);

  .cp--#{$name} {

    // Foreground
    color: map-get($palette, foreground);

    @if $is_dark == true {
      --alt-text: var(--standard-light);
    }

    // Background
    background-color: map-get($palette, background);

    *:focus {
      outline-color: map-get($palette, link_active);
    }

    // Links
    a {
      color: map-get($palette, link);

      &:hover {
        color: map-get($palette, link_hover);
      }

      &:focus {
        color: map-get($palette, link_hover);
        outline-color: map-get($palette, focus);
      }

      &.active,
      &:active {
        color: map-get($palette, link_active);
      }
    }

    // Card
    .card.card--clickable {
      &:focus,
      &:focus-within {
        outline-color: map-get($palette, focus);
      }
    }

    // Buttons
    // Overridden Bootstrap reset
    button:focus:not(:focus-visible) {
      outline-color: map-get($palette, focus);
    }

    .btn {
      &:focus,
      &:focus-visible {
        outline-color: map-get($palette, focus);
      }
    }

    .btn-link {
      --#{$prefix}btn-color: #{map-get($palette, link)};
      --#{$prefix}btn-hover-color: #{map-get($palette, link_hover)};
      --#{$prefix}btn-active-color: #{map-get($palette, link_active)};
    }

    @if $is_dark == true {
      .btn-primary {
        @include convivial-button-variant(
          $background: map-get($palette, accent),
          $color: $darken-90,
          $hover: map-get($palette, accent_hover),
          $active: map-get($palette, accent_active),
        );
      }
      .btn-secondary {
        @include convivial-button-variant(
          $background: map-get($palette, link),
          $color: $darken-90,
          $hover: map-get($palette, link_hover),
          $active: map-get($palette, link_active),
        );
      }
      .btn-outline-primary {
        @include convivial-button-outline-variant(
          $color: map-get($palette, accent),
          $color-hover: $darken-90,
          $hover: map-get($palette, accent_hover),
          $active: map-get($palette, accent_active),
        );
      }
      .btn-outline-secondary {
        @include convivial-button-outline-variant(
          $color: map-get($palette, link),
          $color-hover: $darken-90,
          $hover: map-get($palette, link_hover),
          $active: map-get($palette, link_active),
        );
      }
    } @else {
      .btn-primary {
        @include convivial-button-variant(
          $background: map-get($palette, accent),
          $color: $lighten-90,
          $hover: map-get($palette, accent_hover),
          $active: map-get($palette, accent_active),
        );
      }
      .btn-secondary {
        @include convivial-button-variant(
          $background: map-get($palette, link),
          $color: $lighten-90,
          $hover: map-get($palette, link_hover),
          $active: map-get($palette, link_active),
        );
      }
      .btn-outline-primary {
        @include convivial-button-outline-variant(
          $color: map-get($palette, accent),
          $color-hover: $lighten-90,
          $hover: map-get($palette, accent_hover),
          $active: map-get($palette, accent_active),
        );
      }
      .btn-outline-secondary {
        @include convivial-button-outline-variant(
          $color: map-get($palette, link),
          $color-hover: $lighten-90,
          $hover: map-get($palette, link_hover),
          $active: map-get($palette, link_active),
        );
      }
    }

    // Search form
    @if $is_dark == true {
      .searchform {
        .searchform__button {
          &:before {
            color: #FFFFFF;
          }

          &:hover {
            background-color: rgba(255, 255, 255, 0.05);
          }
        }

        &.searchform--open {
          .searchform__button {
            &:before {
              color: #000000;
            }
          }
        }
      }

      .search-form--inline-reveal {
        @include media-breakpoint-up(lg) {
          .searchform {
            .searchform__button {
              &:hover {
                background-color: rgba(255, 255, 255, 0.05);
              }
            }
          }
        }
      }
    }

    // Form
    .form-control,
    .form-select,
    .form-text,
    .form-textarea,
    .form-check-input {
      &:focus {
        outline-color: map-get($palette, focus);
      }
    }

    // Figure
    @if $is_dark == true {
      figure figcaption {
        background: rgba(255, 255, 255, 0.05);
      }
    }

    // Callout
    .callout {
      border-color: map-get($palette, accent);
    }

    // File
    .file {
      border-color: map-get($palette, link);

      &:hover,
      &:focus {
        border-color: map-get($palette, link_hover);
      }

      &:active {
        border-color: map-get($palette, link_acitve);
      }
    }

    // Slider
    .slick-slider {
      .slick-prev,
      .slick-next {
        background-color: map-get($palette, link);

        &:hover,
        &:focus {
          background-color: map-get($palette, link_hover);
        }
      }
    }

    @if $is_dark == true {
      .slick-slider {
        .slick-prev:before {
          background-image: escape-svg(#{$slider-previous-icon-black});
        }

        .slick-next:before {
          background-image: escape-svg(#{$slider-next-icon-black});
        }
      }
    }

    // Vide modes
    .stack {
      @if $is_dark == true {
        background-color: $darken-70;
        color: $white;
      }
    }
  }
}
